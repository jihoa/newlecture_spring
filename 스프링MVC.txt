Spring MVC (스프링 웹 MVC) 강의방향 안내

스프링 MVC의 두가지 버전

TomCat: 톰캣을 가지고 스프링없이 웹개발할수있다.
그떄는 web.xml에 설정했었는데 web.xml에다가 사용할라이브러리들을 썼다.
스프링을 쓰면 web.xml에 spring Dispatcher라는것을 쓴다.

Tomcat
Tomcat Configuration
-web.xml
	-Spring Dispatcher
	-MyBatis			//사용할 라이브러리들
	-Tiles			//사용할 라이브러리들
	-...


Tomcat
Tomcat Configuration
-web.xml
	-Spring Dispatcher
	


Spring Web
Spring Configuration
	-Servlet		|
	-Service		|
	-Security		}- XML,Annotation,java 로 설정한다.
	-MyBatis		|	
	-Tiles		|	
	-...

스프링 MVC는 프론트 컨트롤러를 제공한다.

web.xml에다가 spring Disapatcher를 올리면 스프링이 모든것을 관리하려고한다. Spring Configuration으로 mybatis,tiles등등이 옮겨지게된다.

설정하는 방법이 버전에따라서 달라졌다. 주로 현재 전자정부프레임은 xml+annotation 조금이고 현재는 Java로 Configuration하고있다. 
스프링을 가지고 개발하다보면 다 다른방식으로 개발해서 구분이 잘안되고 설정하는 것이 버전에따라서 달라서 

설정을 도와줄수있는 스프링부트가 나왔다. spring mvc를 대신하는것이아니고 설정을 모아서 편하게 설정할수있는 부가적인 프레임 워크이다. 스프링에다가 스프링부트를 얹으면 복잡한설정을 피할수있다.


Spring Boot
Starter Configuration	//Starter는 필요한것들 (servlet,service,security)등등을 묶어서 라이브러리로 가지고있다.
application.properties( 설정파일)		//일반적으로 이걸더 많이 쓰인다.
또는
YAML(설정파일)



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Spring MVC (스프링 웹 MVC) 강의 01 - Spring MVC란

스프링이 제공하는 mvc가 무엇인지 알아보는 시간을 가지도록 하자

model1:컨트롤러가 개념적으로 존재, 그것을 출력을 담당하는 부분이 하나로 뭉쳐짐
 model2: 두개를 나누고, 컨트롤러는 서블릿으로 구현, jsp를 템플릿화면으로 뷰로 사용

dispatcher를 이용해서 포워딩을 했다. 모든 컨트롤러는 dispatcher기능을 다 구현해야하고 모든 컨트롤러에다가 가지고있는것은 비효율적인것 같다.
그래서 순수하게 컨트롤러 기능만 POJO로 구현할것이다. (Plain old java object) 평범한 자바 객체

컨트롤러가 빠진 Dispatcher가 남는다.
Dispatcher는의 기능은 view로 포워딩하는 기능이기때문에 기능이 거의다 똑같다. 그래서 Dispatcher하나만 둘수있다.

1. Dispatcher가 controller에게 사용자에게서 온 요청을 전달하고
2. 요청을 해서 결과물을 받아서 View로 전달

그런데 이 과정이 간단하지만은 않다. Dispatcher의 역할이 굉장이 중요하다.
사용자의 요청을 받는다는것은 단순하게 요청을 라우팅하는 역할이아니라 사용자가 전달하는 입력값이있으면 입력값을 Controller에게 사용하기 쉽게 포장해서 줄수도있다.
쉽게 포장해서주면 지금까지 했던것 servlet 이용해서 get 파라미터 이렇게 이용하는게 아니라 서블릿의 기능을 다차단할수있다.
Controller 에 기본적으로 사용할수있는 String int 등등으로 전달이 가능하다.

두번째는 단순하게 기본형으로 전달하는게아니라 어떤데이터를 개체화하는데 notice형 student형 등등으로 담아줄수있다. 서블릿라이브러리를 하나도 쓰지않고 입력을 처리할수있거나
Controller에서 말해놔서 view에 전달할때도 Controller에는 dispatcher기능이없다. 리턴할때 어떤 뷰페이지가 필요하다 라는 정보만 알려주면 Dispatcher가 View를 호출하면서 서블릿 기능을 Dispatcher로 한정할수있다.

이게바로 Dispatcher를 따로 분류하는 이유이다.

 Dispatcher와 Controller 결합력을 낮추게 함으로써 다른환경에서도 사용할수있게끔 하려고 한다.


Dispatcher를 만드는게 중요한데 Dispatcher만드는것을 스프링이 제공했다. 프론트컨트롤러를 잘만들게되면 톰캣과 이별할수도있다.



서블릿 디스패처 스프링이 제공한다.
모든 url요청이 오는데 적절하게 알맞은 컨트롤러에게 전달해야가기때문에  url을 어떤 controller가 처리할지를 가지고있어야한다. 설정파일이 필요하다. 과거에는 web.xml에서 설정하거나 annotation으로 설정했지만 
현재는 servlet.xml에 매핑정보를 쓰게된다.
스프링을 이용해서 컨트롤러를 이용하겠다는 것이다.

스프링 mvc는 라이브러리를 쓰는것인데 spring-webmvc에 있다.





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



