1강 Spring 소개와 학습안내

Spring Framework를 이용해서 웹개발을 해보자
스프링은 웹개발에서 필수이다.
스프링은 무엇이고 왜 스프링을 배워야하는지 알아보자

스프링을 쓰는이유는

dependency injection: 일반 프로그램만들면 안중요하다. 하지만 Enterprise전용으로 만들면 중요하다.
transaction management: 트랜잭션관리가 어려웠던 부분들이 있었는데 스프링이 지원한다.

이 두가지 이유때문에 사용한다.

스프링을 통해서 엔터프라이즈 어플리케이션을 만들것이다,

스프링이 담당하는 녀석들은 세가지 범주를 생각해볼수있다. 그리고 사용하는것들이다.
MVC<- DI	//느슨한 결합력과 인터페이스
트랜잭션<-AOP	
인증과 권한<-Servlet Filter

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2강 느슨한 결합력과 인터페이스

결합력이란? 

소스코드를 수정해서 유지보수를 할수있지만 그렇게하면 항상 소스코드가있어야하고 그리고 소스코드를 열었다가 배포해야되서 위험성이있다.(결합력 높음)
그러기위해서 설정파일이 필요하겠다

그리고 인터페이스라는 것을 사용하면 객체라는 녀석의 이름을 숨길수있다.

스프링하면 떠오르는 단어가 두가지가있다.
DI IOC컨테이너

다음시간에는 DI에대해서 알아볼것이다.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3강 DI(Dependency Injection)

스프링의 능력이 무엇이냐고 묻는다면 객체를 생성해주고 객체를 조립해주는 능력이다.
거기서 사용되는 용어가 있는데 DI,IOC Container이다.

DI라는 용어를 알아볼텐데
Dependency Injection: 종속성 주입이라고 번역되기도 하는데 부품 조립이다.


프로그램을 객체지향으로 만들게 될 경우에 프로그램을 객체들의 조립관계로 만들어진다.

A라는 녀석이 B라는 녀석을 사용하기위해서 생성해서 가진다.(일체형 has a 관계)

Composition has a(일체형 or 붙박이형) 	//결합력이 느슨하다.

class A
{
	private B b;		//B는 A의 부품
	public A(){
		b=new B();
	}
}

Association has a(조립형)			//결합력이 느슨하다.
class A
{
	private B b;		
	public A(){		//직접 생성하지않음
	}
	public void setB(B b){	//생성은 외부에서 생성해서 세팅을해서 그 객체를 사용하는 방식
		this.b=b;
	}
}

DI가 스프링을 왜 중요하게 만들었나?

어떤 방식으로 만들까? 부품을 갈아 끼우거나 업데이트를 생각하고 있다고 하면 느슨한 결합으로 조립형으로 바꿔서 만드는경우가 많다.
기업에서는 조립형을 많이 쓴다. 

B b= new B();		//Dependency(부품) 		
A a = new A();

a.setB(b);			//Injection(주입)

조립형을 쓸때에는 두가지 방식이 있는데 
1. set함수를 통해서 조립(주입)할 수도 있고
B b =new B();
A a = new A();

a.setB(b);	


2. 생성자를 통해서 조립(주입)할 수 있다.
B b =new B();
A a = new A(b);


조립할때 불편함이 있을수가 있다. 방법이있다. 조립을 해주는 서비스를 받는것이다. 조립을 해주는 서비스가 DI이다.
Spring은 이렇게 조립하는 역할을 해줄 수 있고 객체 생성 해줄수 있는 역할을 한다. 스프링이 가진 가장 기본적인 능력은 부품을 조립해주는 능력이다.
injection능력이다.

스프링을 통해서 조립해주고 우리는 그것을 가져다가 쓸것이다.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4강 IoC(Inversion Of Control) 컨테이너

스프링이 가지고있는 가장 기본적인 역할은 조립해주는것
알아야할것
DI
IOC 컨테이너

IOC컨테이너에 대해서 배워보자

스프링의 코어 능력은 부품을 조립하는 능력이다.
그러기위해서는 여러가지 부품들을 주문서에다가 입력해서 스프링에다가 줘야한다.

어떤 부품이 필요하고 어떤 조립관계를 가지는지 명세화해야하는데
xml이나 annotaion으로 주문서를 작성할수있다.

IOC컨테이너의 용도는?

주문서를 작성했으면 부품을 구입해서 박스에 담을것이다.
스프링도 주문서에 입력되어있는데로 객체를 생성해서 담을 그릇이 필요하다.

IOC컨테이너라고 부르는이유는?

부품이라는 녀석이 어떤 조립관계를 가지는지 알아야한다. 작은부품이 만들어지고 큰부품이 만들어지고 결합시킨다.(역순)
일체형일때는 큰거를 만들고 작은거 순서대로 만들어진다. 전혀 반대이다. (정방향)


결합까지되서 조립까지되서 컨테이너에 담겨진다.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5강 Depedency를 직접 Injection 하기

package spring.di;

import spring.di.entity.Exam;
import spring.di.entity.NewlecExam;
import spring.di.ui.ExamConsole;
import spring.di.ui.GridExamConsole;
import spring.di.ui.InlineExamConsole;

public class Program {

	public static void main(String[] args) {
		
		Exam exam = new NewlecExam();
		ExamConsole console =new InlineExamConsole(exam);	//DI
		//ExamConsole console =new GridExamConsole(exam);
		console.print();
	}

}
DI를 하게되면 부품을 바꾸든 부품을 사용하는 외장을 바꾸든 해야하는데
귀찮은 일이다. 그래서 스프링을 사용할것이다.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6강 스프링 DI 설정을 위해 이클립스 플러그인 설치하기

자바코드로 두개의 객체를 결합을할때 직접했는데 SPRING을 이용해서 DI 작업을 하는것을 알아볼것이다.
스프링에게 주문서를 작성할것인데 그 형태가 XML이나 어노테이션이다.

현장에서는 XML형태를 아직도 많이쓴다.

xml을 이용해서 작성할때 스프링이 이해하는 스프링에서 제시하는 형태로 적어야한다.
그럴려면 <bean>태그를 토시하나 안틀리고 적어야하는데 그 대신 플러그인을 설치해서 도움을 받자

eclipse help->eclipse marketplace->spring검색

스프링 4는 스프링부트이다. 밑에있는것은 Spring Tools 3 를 설치하자
스프링은 설정파일이 귀찮아서 쓰는것이다.

설치가 완료되고 di에서 new->other->spring->spring bean configuration file 
을 설정하면 xml파일이 생성된다. 부트는 자바컨피그를 기본으로 하기때문에 설정파일을 추가할수없다.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7강 스프링 DI 지시서 작성하기

스프링을 이용해서 DI하는 방법을 알아볼것이다.

public class Program {

	public static void main(String[] args) {
		
		
		Exam exam = new NewlecExam();
		ExamConsole console =new GridExamConsole(exam);
		console.setExam(exam);
		console.print();
	}
}

이렇게되어있는데 
		Exam exam = new NewlecExam();
		ExamConsole console =new GridExamConsole(exam);
		console.setExam(exam);
		console.print();
이 부분을 스프링이 하게 할것이다. 그래서 스프링파일을 만들고 Exam exam = new NewlecExam(); 그대로 쓰면 좋겠지만
java언어로 이루어진것이 아니기 때문에 <bean> 태그를 이용해서 생성할 개체를 지시해달라고 말한다.
<bean id="" class=""/>
class:어떤 클래스를 객체화 할건지는 class에다가 적어준다 패키지명까지 정확하게
id: 그 객체에 어떤 이름을 쓰려고하는지 지정한다.

<bean id="exam" class="spring.di.entity.NewlecExam"/> 			// 이런식으로하면 xml로 지시했다라고 할수있다.

-settings.xml

<!-- Exam exam = new NewlecExam(); -->
<bean id="exam" class="spring.di.entity.NewlecExam"/>
<!-- ExamConsole console =new GridExamConsole(exam); -->
<bean id="console" class="spring.di.ui.GridExamConsole">		// 변수명:console 클래스명:spring.di.ui.GridExamConsole
	<!-- console.setExam(exam); -->				
	<property name="exam" ref="exam" />			// 설정(세팅)을 할때는 property태그를 사용 setExam 함수 name에서 호출할것인데 set을 없애고 대문자를 소문자로 바꿨다.  세터에다가 설정할수있는타입은 두가지가있다. ref,value 설정하는 객체의 이름을 넣어줘야한다. 들어가야하는녀석이 value형이면 value에 들어가고 ref(참조하는값 spring.di.entity.NewlecExam) 이기때문에 ref에 들어간다.
</bean>
스프링에게 지시서를 넘기고 이대로 객체를 생성해서 조립해달라 라고 부탁을해야한다. 그리고 중요한것은 우리가 이 지시서를 넘길 주체를 아직 안만들었다.
다음시간에는 주체를 생성해보자


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8강 스프링 IoC 컨테이너 사용하기(ApplicationContext 이용하기)

지난 시간에 작성했던 지시서를 읽어서 지시대로 객체를 만들고 그 객체를 활용하는 방법을 알아보자

스프링에서 DI 또는 지시서를 읽어가지고 조립해주는 구체적인 객체는 ApplicationContext이다. 

ApplicationContext context =new ClassPathXmlApplication("config.xml");			//괄호에는 settings.xml 을 넘길것이다.
ApplicationContext는 인터페이스이다.

ApplicationContext의 종류

ClassPathXmlApplicationContext		//어플리케이션의 루트로 부터 경로를 지정하고 싶을때(루트에뒀다)
FileSystemXmlApplicationContext		//c드라이브 아래 어디에두었다.
XmlWebApplicationContext			//web에 두었다.
AnnotationConfigApplicationContext		//어노테이션에 두었다.

이들의 차이점은 지시서를 넘길때 그녀석의 위치를 어떻게 알려주느냐에따라 달라진다.

스프링 라이브러리가 없어서 ApplicationContext context =new ClassPathXmlApplication("config.xml"); 구문에 에러가 발생했다.
maven project로 바꿔서 dependency를 추가해서 해결했다.
프로젝트오른쪽 클릭-> configure-> convert to mavenProject 로 바꾸고 구글에 maven Repository에가서 spring context 최신버전을 추가했다. 

-pom.xml

  <dependencies>
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.2.13.RELEASE</version>
</dependency>
  </dependencies>

지시서를 잘읽었다면 객체를 두개만들고 인젝션까지 잘해서 IOC컨테이너에다가 담아놨을것이다.
컨테이너 쓸때는 두가지방식이있다.
이름으로 꺼낼수도있고, 클래스명으로 꺼낼수도있다.

이름으로 꺼내면 오브젝트로 꺼내져서 형변환을 해서 꺼내야한다.
ExamConsole console=(ExamConsole) context.getBean("console");

자료형명으로 도 꺼낼수도있다. 자료형명으로 꺼내면 타입명을 문자열로 꺼내는게아니라 ExamConsole(인터페이스)에 맞는 녀석을 찾아서 꺼내달라라는것이다. 
		ExamConsole console=context.getBean(ExamConsole.class);




-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9강 값 형식 DI

우리가 지시할때 꼭 레퍼런스(ref)만 쓰이는것이 아니다. 값(value)도 가능하다. 그 값을 세터를 이용해서 인젝션 하는 방법을 알아보도록 하자.

만약에 자바 코드로 값을 세팅하겠다하면 이렇게 세터를 써서 설정할수 있었을 것이다.

<bean id= "exam" class="spring.di.entity.NewlecExam">
	<!--
	exam.setKor(20);
	exam.setEng(50);
	exam.setMath(80);
	-->
	//지시서에서는 어떻게할까?
	<property name="kor" value="20"/>
	<property name="eng" value="50"/>
	<property name="math" value="80"/>

</bean>

-pom.xml
	<bean id="exam" class="spring.di.entity.NewlecExam">
		<property name="kor" value="10"/>						//value값으로 값을 설정해보자
	</bean>
	<!-- ExamConsole console =new GridExamConsole(exam); -->
	<bean id="console" class="spring.di.ui.GridExamConsole">
		<!-- console.setExam(exam); -->
		<property name="exam" ref="exam" />
	</bean>

국어성적만 세팅해서 에러가 난다 에러가 왜 나냐면 kor라는 속성이 유효하지않아서 에러가 나는것이다. setter가 유효하지않다.

exam에 세팅할수있는녀석이 없어서 그렇다 NewlecExam.java에서

NewlecExam.java 에서 오른쪽마우스 source->getter and setter 에서 설정해주면 에러가 해결되었다.

-pom.xml
<bean id="exam" class="spring.di.entity.NewlecExam">
	<property name="kor" value="10"/>

	<!--
	//단일 태그가 아닌 방법으로도 구현이 가능하다.
	<property name="kor">
		<value>10</value>
	</property>
	-->

	<property name="eng" value="10"/>
	<property name="math" value="10"/>
	<property name="com" value="10"/>
</bean>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

10강 생성자 DI

지난시간에 EXAM이라는 녀석의 국어영어수학의 값을 세터로 설정했는데
이번시간에는 Setter를 이용해서 세팅해보자
사용하는 방법은 간단하다. property 대신에 constructor-arg 를 사용하면 된다,

<bean id= "exam" class="spring.di.entity.NewlecExam">
	<constructor-arg value="30"/>
	<constructor-arg value="50"/>
	<constructor-arg value="70"/>
</bean>

순서대로 30 50 70 이 순서대로 값이 들어간다.

NewlecExam에는 기본생성자도 없는 상태이다.
기본생성자를 ctrl+space눌러서 생성해주고
public NewlecExam() {
	// TODO Auto-generated constructor stub
}

오버로드 생성자는 오른쪽마우스->source->Constructor using Field 를 누르면된다. 그리고 모든속성을 눌러주고 생성하면된다.
그리고 super는 의미가 없으니 지워주자

public NewlecExam(int kor, int eng, int math, int com) {
	this.kor = kor;
	this.eng = eng;
	this.math = math;
	this.com = com;
}

그렇다면 이것을 이용해서 값을 어떻게 세팅할것이냐?

-pom.xml
<bean id="exam" class="spring.di.entity.NewlecExam">
	<constructor-arg value="10"></constructor-arg>
	<constructor-arg value="20"></constructor-arg>
	<constructor-arg value="30"></constructor-arg>
	<constructor-arg value="40"></constructor-arg>
</bean>

이렇게하면 값 4개를 가지고있는 생성자를 이용해서 값을 세팅한것이다. 이렇게 세팅하면 문제없이 작동한다. 하지만 문제가 생긴다.
어떤게 수학인지 순서가 헷갈릴수가 있다. 버그를 양성할수도 있는 문제이다.
순서라는 녀석을 지정할수있어야한다. index 속성값을 사용하면된다.

-pom.xml

<bean id="exam" class="spring.di.entity.NewlecExam">
	<constructor-arg index="0" value="10"></constructor-arg>
	<constructor-arg index="1" value="20"></constructor-arg>
	<constructor-arg index="3" value="30"></constructor-arg>
	<constructor-arg index="2" value="40"></constructor-arg>
</bean>

-NewlecExam.java
//NewlecExam에서는 toString을 오버라이드 해서 순서가 바뀌었는지 확인할것이다.

@Override
public String toString() {
	return "NewlecExam [kor=" + kor + ", eng=" + eng + ", math=" + math + ", com=" + com + "]";
}

-Program.java

Exam exam =context.getBean(Exam.class);				//exam을 직접꺼내올것이다. Exam이라는 녀석에 데이터가 있으면 반환해달라.
System.out.println(exam.toString());					//그리고 그 Exam을 출력할것이다.

이렇게 index를 쓰지않고 다른방법을 쓸수도 있다. name이라는 녀석이다.

-pom.xml

<bean id="exam" class="spring.di.entity.NewlecExam">
	<constructor-arg name="kor" value="10"></constructor-arg>
	<constructor-arg name="eng" value="20"></constructor-arg>
	<constructor-arg name="com" value="30"></constructor-arg>
	<constructor-arg name="math" value="40"></constructor-arg>
</bean>

이렇게 직접 칼럼명을 지정해서 여기다가 값을 지정할수도 있다. 이것이 제일 적합할것이다. 

또다른 옵션이있다.

class NewlecExam
{
	public NewlecExam(int kor, int eng, int math){...}

	public NewlecExam(float kor, float eng, float math){...}
}

억지를 부려서 개수는 같은데 자료형이 다를경우 애매하다. 이름은 같다. 그래서 어떤생성자를 써야하는지 애매할때 쓸수있는 type을 지정할수있는 옵션이 있다.

-pom.xml
<bean id="exam" class="spring.di.entity.NewlecExam">
	<constructor-arg name="kor" type="float" value="10"></constructor-arg>
	<constructor-arg name="eng" type="float" value="20"></constructor-arg>
	<constructor-arg name="com" type="float" value="30"></constructor-arg>
	<constructor-arg name="math" type="float" value="40"></constructor-arg>
</bean>

생성자를 통해서 값을 설정할때 Constructor를 사용할때 태그가 너무 번잡하다 할때 쓸수있는 지시자를 설정할수있다.

설정파일 처리기 추가

<beans xmlns="http://www.springframework.org/schema/beans"
xmln:p="http://www.springframework.org/schema/p"			//이부분이 추가됨
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans.xsd">

속정 설정 방법
<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="10" p:eng="20" p:math="30"></bean>
접두사 p 그리고 속성명을 써주게되면 그속성에다가 값을 설정할수 있다.

그게 bean이라는 태그의 능력이아니고 추가적인 처리기의 도움을 받아서 사용하게된다.
그래서 처리기를 추가해야한다. Namespaces 에서 p를 클릭해주면 p항목이 추가됐다.
namespace가 무엇이냐?

프로그래밍 랭귀지는 모듈을 가지고있고 충돌이 날수가있따.
예를들어 길동이라는 이름이 반에 두명있으면 성으로 구분가능하다.
그것이 namespace이다. 공교롭게 홍길동이 두명이면 식별할수있도록 다른 확장된 이름을 붙일수있다. 그것이 namespace이다.

bean이라는 녀석을 썼는데 만약에 bean이 두개라고하자. 하나는 객체를 생성하는 bean이고 다른의미의 bean이 있다고하자
같은문서에 두개의 bean이 있을수 있을까? 충분히 가능하다. 왜냐면 하나의 처리기에 의해서 읽혀지는것이 아니라 두개이상의 처리기에서 읽혀지면 가능하다.

<홍길동:bean></홍길동:bean>		//홍길동이 처리할 bean
<김길동:bean></김길동:bean>		//김길동이 처리할 bean

앞에다가 이름을 붙여주면 자기가 처리할 bean만 처리하고 넘어가게된다. 접두사라고하는 녀석 namespace라고 하는 녀석을 이용한 태그의 구분은 두가지의 의미를갖는다.

1.태그가 특정한 처리기에 의해서 처리할수있도록 특정
2.태그의 이름을 식별하기 위해서 사용한다.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

11 콜렉션 생성과 목록 DI

콜렉션을 생성하는 방법과 콜렉션에 객체를 참조하는 (초기화) 방법을 알아볼것이다.
콜렉션은 ArrayList가 대표적이다.

-Program.java

List<Exam> exams=new ArrayList<>();		//이녀석을 통해서 참조할 녀석은 Exam이다. Exam을 참조 하기위한 콜렉션으로써
exams.add(new NewlecExam(1,1,1,1));		//exams에다가 추가할수있다. exam객체를 newlecExam을 추가하자
		
for(Exam e: exams)
	System.out.println(e);
}

ArrayList라는 녀석을 생성했는데 xml에서 생성해서 값을 초기화하는 방법을 알아볼것이다.

-Program.java

//List<Exam> exams=context.getBean("exams");	// 컨텍스트를 통해서 get하는데 두가지방법이가능 이름or 자료형 이름을 통해서가져오자			
List<Exam> exams= (List<Exam>) context.getBean("exams") // 참조해서 쓸수있기 위해서 형변환을 해야한다.	

-settings.xml
<bean id="exams" class="java.util.ArrayList"/>		//exams라는이름의 객체를 클래스는 java.util.arrayList를 만들어달라

잘만들어졌으면 참조하는데 문제가없을것이다.

그렇다면 newlecExam이라는 객체를 xml에서 만들어서 바로 세팅하고싶다면 어떻게할까?

add는 세터가 아니기때문에 property로 세팅이 불가능하다.

ArrayList를 자세히보면 ArrayList에 생성자에 보면 생성자에다가 컬렉션을 대입할수있도록 하는 능력이있다.
생성자에 대입하는 방식으로 객체로 만들어보자

<bean id="exams" class="java.util.ArrayList">			
	<constructor-arg>									//construct-arg를 이용해서 값을 설정
		<list>									//list라는 개념으로 값을 초기화할것이다. 객체를 직접만들어서 초기화할수도있고 위에했던 방법처럼 값을 초기화도 가능하다.
		 <bean  class="spring.di.entity.NewlecExam" p:kor="1" p:eng="1"/>		//객체를 직접만들어서 초기화 하는 방법
		<ref bean="exam"/>							//위에있는 객체를 참조해서 만들기 
		</list>
	</constructor-arg>
</bean>

이렇게하면 두개의 항목이 추가된것이다. 하나는 직접추가 하나는 참조
이러한 방법으로 컬렉션 리스트를 생성자를 넘기는 방식으로 어레이 리스트를 만들게되면은 두개의 객체가
반복하면서 출력이될것이다.	

이렇게해서 초기화된 컬렉션이 필요하면 정적인 방식으로 xml에서 만들어서 그냥 갖다 쓸수있따.

생성자에다가 목록으로 추가된 ArrayList를 만드는것이아니라 컬렉션을 개별적으로 만드는 방법은 없는가?

그거는 별도의 네임스페이스를 추가해야한다.

util이라는 namespace를 추가하도록하자.

<util:list id="exams" list-class="java.util.ArrayList">			//컬렉션을 만들어줄것인데 추가적으로 리스트가 사용할 클래스를 구체화해야한다.
	<bean  class="spring.di.entity.NewlecExam" p:kor="1" p:eng="10"/>
	<ref bean="exam"/>
</util:list>

위의 <list>는 목록을 세팅할때 사용되는 녀석으로써 객체를 만드는 역할을 하지못한다.
<util:list>는 같아보이지만 처리기가 다르고 실제로 객체를 만드는 능력이있다.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12 어노테이션을 이용할때의 장점과 @Autowired를 이용한 DI 해보기

JAVA를이용해서 어플리케이션을 만들때는 그 초기화 설정에 해당되는 그런 설정을 할때는 두가지 설정방법이있다.
1.xml을 이용해서 외부파일에다가 설정정보를 두는방법
2.어노테이션을 이용해서 코드파일에다가 그 설정을 심는 방법

코드파일에다가 설정을 심을때 사용되는 설정정보가 Annotation이다.

설정을 Annotation으로 바꿔서 해보자
Annotaiton을 이용했을때 장점?

DI하는 부분을 Annotation으로 바꿀것이다.

xml을 이용해서 모듈 변경할때는

<bean id="b" class="data.B2" />				//data.B2를 B3로 변경하면 되었다.
<bean id= "console" class=service.S">
	<property name="b" ref="b"	/>
</bean>


객체를 바꾸면 설정도 같이 바뀌면 안될까? 설정을 바꾸기위해 파일을 열어서 바꾸는것은 귀찮다고 생각해서
코드에다가 설정을 심는 (메타데이터를) 방법으로 갔다.

설정을 분리하는 방식에서 어노테이션을 이용해서 코드와 같이가지고 가는 방식이 트렌드가  됐다.

xml에서 Annotation으로 바꾸기 위한과정으로

-settings.xml

<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="10" p:eng="10"/>
<bean id="console" class="spring.di.ui.InlineExamConsole">
	<property name="exam" ref="exam" />		//1. 이 부분을 뺄것이다 . exam 객체와 console객체를  인젝션해주는 (DI해주는) 객체이다.
</bean>

이때 사용할수있는 것이 Autowired이다. 콘솔에가면 exam이라는 세터가있고 사용하는 속성이있는데 @Autowired를 붙이면 1번을 지울수있다.

@Autowired			//이렇게하면 <property name="exam" ref="exam" /> 내용이와있는것이다. <bean id="console" class="spring.di.ui.InlineExamConsole"> 객체가 만들어지면 Autowired가 들어간 세터가있는지 찾게된다. 그리고 자동으로 연결된다.
@Override	
public void setExam(Exam exam) {
	this.exam=exam;
}

하지만 Nullpointer가 발생한다. 지시서에다가 키워드를 심어야한다. 객체를 생성할때 Autowired하는 키워드를 심어놨으니까 있으면 적절한 객체를 참조해달라고해야한다.
  Context라고하는 namespace가 필요하다.

-settings.xml 
<context:annotation-config/>

이 한줄 만 추가해주면된다. 객체들이 어노테이션을 갖고있다는 뜻이다. 에러가 안나고 정상적으로 Autowired됐다.

Autowired라고하면 뭐를 근거로 연결해주는 것일까? 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13강 @Autowired의 동작방식 이해와 @Qualifier 사용하기

지난시간에 Autowired를 배웠다 DI하는 xml설정을 대신하는 어노테이션 설정인데 사용만해봤고,

xml을 가지고 Di를 했었다. Di를 하기위해서 스프링은 ioc컨테이너를 가지고있다.
객체를 생성하고 그들을 조립해주는 그런과정의 객체를 담는 그릇이다.

Auto는 자동으로 찾아서 객체를 세팅한다는것인데 뭘 기준으로 찾는것이가?
1. 자료형?
2. 변수명?

<bean id="exam1" class="spring.di.entity.NewlecExam" p:kor="20" p:eng="30"/>		// exam을 exam1로 바꾸었다.

이름하고는 상관이없다.


자료형에 부합하는것을 찾아서 자동으로 바인딩을 해주는 것이다.

그렇다면 컨테이너에 객체가 두개있다면? 바인딩이 될까?

<bean class="spring.di.entity.NewlecExam" p:kor="10" p:eng="10"/>
<bean class="spring.di.entity.NewlecExam" p:kor="20" p:eng="30"/>

에러가 난다. 에러메시지를 보면 만족할수있는 디펜던시를 찾아보려고했으나 Exam인데 기대값은 하나였지만 두개가 발견되었다.
두개가있어서 못한다고 뜬다.

그럴때사용하는 방법은 이름을 똑같이 주면된다.

<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="10" p:eng="10"/>
<bean class="spring.di.entity.NewlecExam" p:kor="10" p:eng="10"/>

이름이 다르면 불가능하다.
<bean id="exam1" class="spring.di.entity.NewlecExam" p:kor="10" p:eng="10"/>
<bean class="spring.di.entity.NewlecExam" p:kor="10" p:eng="10"/>

하지만 @Qualifer를 사용하면 가능해진다.

-inlineExamConsole.java

@Autowired
@Qualifier("exam1")					//exam1 에 이름에 해당하는 녀석을 찾아서 연결해준다.
@Override
public void setExam(Exam exam) {
	this.exam=exam;
}



에러가 났었는데 Exam exam =context.getBean(Exam.class);	 이부분때문에 에러가 발생했다. Exam이라는 녀석을 얻어서 쓰게되있는데 문제가 된다. 그래서 에러가발생했었다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

14강 @Autowired의 위치와 required옵션

Autowired는 설정할수 있는 위치가 3군데가 있다. 주의할사항이있어서 이야기하고 required는 언제쓰는지 알아보자

1.Autowired는 세터앞에사용하지않고 필드위에다가 쓸수도있다. 기본생성자에서 객체를 생성하는 경우
2.오버로드 생성자 앞에다가 도 할수있다.오버로드 생성자에서 객체를 생성하는경우
3. 세터앞에서 생성하는경우


	////////////////////////////////////////////1번위치/////////////////////////////////////////////////////////
	@Autowired					//기본생성자를 호출하면서 인젝션된다.(기본생성자가 실행)
	@Qualifier("exam1")				//기본생성자가 없으면 에러가 발생하게된다.
	private Exam exam;
	
	public InlineExamConsole() {
		// TODO Auto-generated constructor stub
	}
	
	public InlineExamConsole(Exam exam) {
		this.exam = exam;
	}

	@Override
	public void print() {
		System.out.printf("total is %d, avg is %f\n", exam.total(),exam.avg());
	}
	////////////////////////////////////////////2번위치/////////////////////////////////////////////////////////
	@Autowired					//세터함수 호출되면서 인젝션이 호출 (세터가 실행)
	@Qualifier("exam1")
	
	@Override
	public void setExam(Exam exam) {
		this.exam=exam;
	}

@Autowired				
@Qualifier("exam1")			//오버로드 생성자 앞에다 붙이면 에러가 발생한다. 하나만 넣을수있는데 두개이상넣을수있다고생각해서 에러가난다. 
public InlineExamConsole(Exam exam) {
	this.exam = exam;
}


@Autowired					
public InlineExamConsole(@Qualifier("exam1")Exam exam1, @Qualifier("exam2")Exam exam2) { //두개이상일때는 각자 지정할수있도록 필드에다가 지정할수있다.	
	this.exam = exam;
}

내가 어떤 함수를 실행되면서 인젝션되길 바라는가에 따라서 우치리를 적절하게 골라야한다.

xml파일에 객체가없으면 에러가 날것이다.
-settings.xml
<bean id="exam1" class="spring.di.entity.NewlecExam" p:kor="20" p:eng="10"/>
<bean id="exam2" class="spring.di.entity.NewlecExam" p:kor="20" p:eng="10"/>

이부분이 없으면 에러가난다

만약에 객체가 없을때도 exam==null 을 실행기키고싶다면
@Autowired의 속성인 requried를 설정하면된다.

@Autowired(required=false) 를 해주면된다.	

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

15강 어노테이션을 이용한 객체 생성

지난시간에 

-inlineExamConsole.java

public class InlineExamConsole implements ExamConsole {

	@Autowired				//DI 방법을 어노테이션으로 옮겨왔다.	
	private Exam exam;	
	
	public InlineExamConsole() {
		System.out.println("constructor");
	}
}

-settings.xml

<context:annotation-config />	
<bean id="exam" class="spring.di.entity.NewlecExam"/>		// xml에서 객체를 생성하는 방법 을 어노테이션으로 생성하는 방법을 알아볼것이다.
	

어노테이션으로 객체를 생성하기위해서는 클래스 위에다가 컴포넌트라고하는 @를 붙이면 객체화 되는 작업을한다.

@Component
public class InlineExamConsole implements ExamConsole {

	@Autowired	
	private Exam exam;	
}

근데 이렇게만 쓰면 에러가 난다. 생성된객체의 속을 들여다 볼수없기때문이다. 
xml안에없으면 들여다볼수없기때문이다.

xml에 설정을 해야한다.

-settings.xml

객체 생성부분을 모두 주석처리하자

<context:component-scan base-package="spring.di.ui"/>	// package명안에 있는 클래스들이 있을텐데 그 클래스를 읽어서 컴포넌트가있는지 찾아서 있으면 객체화 시켜달라
//<context:annotation-config />			// 이부분은 삭제한다.
<bean id="exam" class="spring.di.entity.NewlecExam"/>

context:component-scan을 추가해줘야한다.
component-scan을 추가하면 <context:annotation-config /> 는 없어도 된다 해당클래스를 읽기때문이다.

-Program.java

public class Program {

	public static void main(String[] args) {
		
		... 생락...		
		
//		//ExamConsole console=(ExamConsole) context.getBean("console");	//콘솔로 찾았다. 이름으로 찾은것
		ExamConsole console=context.getBean(ExamConsole.class);	// ExamConsole 인터페이스에 부합하는 객체가있으면 얘를 찾아라
		console.print();

만약에 이름으로 할때는 어떻게할까?

		ExamConsole console=(ExamConsole) context.getBean("console");	
		//ExamConsole console=context.getBean(ExamConsole.class);	
		console.print();

xml에서는 id로 했었는데 어노테이션에서는

-InlineExamConsole.java

@Component("console")	// Component 뒤에다가 찾을 이름을 붙여주면된다.

객체를 생성할때는 컴포넌트라는 어노테이션 사용하고 이름을 부여할수있고, xml파일에서는 <context:component-scan base-package="spring.di.ui"/> 설정을 해줘야한다.
Autowired가 될수있도록 exam 객체도 만들어줘야한다.

-InlineExamConsole.java

@Component("console")	
//Qualifier("exam2")		//이름을 지정하지않아야  클래스에 해당하는것을 찾기때문에 지워준다.

-NewlecExam.java

@Component		//추가해준다.
public class NewlecExam implements Exams{

이렇게하면 xml 파일에서는  <context:component-scan base-package="spring.di.ui"/>  newlecExam이 있는 package spring.di.entity;를 뒤지지않아서 안된다
검색할수 있도록추가해줘야한다.
 <context:component-scan base-package="spring.di.ui, spring.di.entity"/>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

16강 특화된 @Component 어노테이션(@Controller/@Service/@Repository)

@Component
public class NewlecExam implements Exam {

	private int kor;
	private int eng;
	private int math;
	private int com;

}
어노테이션으로 객체를 생성했을 때 값을 어떻게 설정하냐면 @Value 를 이용해서 초기값을 설정할수있다.

@Component
public class NewlecExam implements Exam {

	@Value("20")
	private int kor;
	@Value("20")
	private int eng;
	private int math;
	private int com;

}

오늘 할내용은 어노테이션을 설정할때 NewlecExam이라는객체는 Component라는 어노테이션으로 객체화하면 잘맞지않는다.

@Component를 붙여서 클래스들을 다 객체화할수있다.
@Component는 무엇을 대상으로 하냐면 mvc 방식으로 웹 어플리케이션을 만들게 될경우에 그 mvc를 구성하고있는 자바코드가 업무용 로직을 가지고있는 코드들을 컴포넌트라고한다.

@Component는 3가지가 있다.
1. @Controller
2. @Service
3. @Repository

이것들은 컴포넌트와 같지만 컴포넌트보다는 더 역할을더 부여받은 녀석들이다.
이것들을 사용하면 그 클래스가 어떠한 역할을 하고있는 클래스라는것을 명시화 할수있어서 더 바람직하다.

@를 붙일때 이름을 명시적으로 붙이면 용도를 더 가시적으로 볼수있다.
자바 플랫폼에서 제공하는 클래스나 남이 만든 클래스들은 소스코드가 없어서 컴포넌트라는 어노테이션을 붙이는게 불가능하다.
여타클래스를 생성하는방법이 필요하다. 
spring을 xml가 어노테이션을 겸해서 해야하는가?
다음시간에는 xml에서 모든것을 제외하고 다 어노테이션으로 구현할수있도록 config를 자바코드로 작성할것이다.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

17강 XML Configuration을 Java Configuration으로 변경하기

Config설정을 xml로 다뤘는데 xml안쪽에다가 다양한태그를 이용해서 디펜던시 생성해달라 인젝션해달라 라는 이야기를했다.
어노테이션이라는것을 이용해서 자바코드에다가 설정을 심고 설정을 xml에서 지우기로했다.

현재 xml에남은 설정은

-settings.xml

<context:component-scan base-package="spring.di.ui, spring.di.entity"/>
<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="20" p:eng="10"/>
 
두가지 밖에없다.

몇개남겨지지않은내용도 없애고 어노테이션으로 설정할수있게끔할것이다. 
만약에 스프링이용할때는 설정을 선택하는게좋다. 어노테이션 or xml 섞는것은 별로다.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"...>

</beans>

			↓ 자바 파일로 바꾸기 위해서는

@ComponentScan("spring.di.ui")				//<context:component-scan base-package="spring.di.ui, spring.di.entity"/> 이부분이다.
@Configuration						//설정파일이다 라는것을 표시하기 위해서 @Configuration을 붙여야한다. 
public class NewlecAppConfig{
	@Bean						//객체를 생성하기위한설정이었는데 직접생성하도록 @Bean태그를 사용하자 (@Bean: 만든것을 컨테이너에 담아준다.)
	public Exam exam(){				//인터페이스로 받기때문에 인터페이스 타입으로 반환해도된다.
							// bean id="exam" 에서 exam은 exam()와 같다.
							//<bean id="exam" class="spring.di.entity.NewlecExam" p:kor="20" p:eng="10"/>
		return new NewlecExam();			// exam()이을 호출하면  new에서 exam()이 만들어낸 객체를 ioc컨테이너에 담는다.
}

settings.xml 을 이제 더이상 사용하지 않을테니 지워야할까? 지우지 않아도된다. xml설정하는 방식 을 지우면 된다. 
 spring.di 에다가 자바클래스를 추가하자 .
되도록이면 설정파일임을 알수있도록 Config를 붙여주자

-Program.java

ApplicationContext context = 
	new ClassPathXmlApplicationContext("spring/di/settings.xml");

Application Context는 xml을 다루는 것들 3가지(ClassPathXmlApplicationContext,FileSystemXmlApplicationContext,XmlWebApplicationContext) 를 다뤘지만
이제는 Annotation을 다루는 AnnotationConfigApplicationContext를 사용할것이다. Annotation을 가지고있는 자바파일을 가지고 config로 쓸때 사용한다.

상단의 코드를 바꾸도록하자

-Program.java

ApplicationContext context = 
	new AnnotationConfigApplicationContext(NewlecDIconfig.class);





-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
